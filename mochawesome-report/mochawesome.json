{
  "stats": {
    "suites": 21,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2022-03-29T21:43:45.982Z",
    "end": "2022-03-29T21:43:50.706Z",
    "duration": 4724,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "941a4d9d-b5ef-4cfc-aedd-5f6a6b90c772",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c92e224-44b1-44ba-af10-0ac521ab523a",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
          "file": "\\hana-clientAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e174e6a-df14-493e-b159-a3c0aa87156b",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
              "file": "\\hana-clientAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 863,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "b3be7b00-ed32-42cb-96aa-49dc2b63f6c2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Await returns single record",
                  "timedOut": null,
                  "duration": 512,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "10ab396d-a8c9-436a-bd86-f729748daa02",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hanaClientAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "1ad1ede8-5be0-4d95-9c44-5b36d0503993",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3be7b00-ed32-42cb-96aa-49dc2b63f6c2",
                "10ab396d-a8c9-436a-bd86-f729748daa02",
                "1ad1ede8-5be0-4d95-9c44-5b36d0503993"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1376,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "aeb45d1e-1204-4472-a42e-e41d1ae6afca",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
          "file": "\\hdbAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "73979ad1-0345-42d5-a72c-c407cd6c57a3",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
              "file": "\\hdbAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 608,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "62dd7581-6334-46b3-adea-9ab0ef34243f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Await returns single record",
                  "timedOut": null,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "8f40c99f-7c22-46f4-87b3-8c2a40119a06",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "f3212468-bbb7-450e-b7ce-9a204954e770",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62dd7581-6334-46b3-adea-9ab0ef34243f",
                "8f40c99f-7c22-46f4-87b3-8c2a40119a06",
                "f3212468-bbb7-450e-b7ce-9a204954e770"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1101,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "daf9e5ba-aa0b-4a06-a849-61245ebd9c62",
          "title": "cds",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
          "file": "\\cds.Test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"cds\"",
              "fullTitle": "cds \"before all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "sinon.stub(console, 'log')  // disable console.log\nsinon.stub(console, 'info')  // disable console.info",
              "err": {},
              "uuid": "a679ec7a-3953-48ef-a3a3-58bee5f918e7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"cds\"",
              "fullTitle": "cds \"after all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log.restore()\nconsole.info.restore()",
              "err": {},
              "uuid": "d12e57d2-219a-460d-9101-23235b864e7e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ab774932-b820-4a7a-a383-301f659d9d7c",
              "title": "Await example with CDL",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "cds Await example with CDL returns 10 records",
                  "timedOut": null,
                  "duration": 587,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = SELECT\n    .from(cds.db.entities.TABLES)\n    .columns(TABLES => {\n        TABLES.SCHEMA_NAME.as('SCHEMA'),\n            TABLES.TABLE_NAME\n    })\n    .limit(10)\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "ec624bf1-dd4d-4270-a05a-678855b7d550",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec624bf1-dd4d-4270-a05a-678855b7d550"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 587,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "1ecf94a8-4685-442e-bfa8-d31718cb6eda",
              "title": "Await example with Query as String",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "cds Await example with Query as String returns single record",
                  "timedOut": null,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "a4ecdbe6-5ec7-4d0b-be98-541371de53d2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "cds Await example with Query as String throws error with target table not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await cds.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "541d9cd2-b422-4ea5-8beb-95c2de693428",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4ecdbe6-5ec7-4d0b-be98-541371de53d2",
                "541d9cd2-b422-4ea5-8beb-95c2de693428"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "a05d1965-87f5-4c54-a29e-6ddac9fff99c",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
          "file": "\\hdb.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b65a59bc-8ef7-45fc-a93f-3c8e738e0216",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
              "file": "\\hdb.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 543,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "fe3fd897-58a1-423d-9293-03fe7534aa1f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 459,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "d5c3e7a8-a324-4baf-92c0-98ff90355937",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "7af24a10-09be-437f-b5d8-14f4c55ae05b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe3fd897-58a1-423d-9293-03fe7534aa1f",
                "d5c3e7a8-a324-4baf-92c0-98ff90355937",
                "7af24a10-09be-437f-b5d8-14f4c55ae05b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1493,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "138a5a14-6a7e-4d6e-b04f-f23bb7d0f29c",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
          "file": "\\hana-clientPromise.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ab4ad10-b281-4049-809c-38bb2cace728",
              "title": "Example with Promises",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
              "file": "\\hana-clientPromise.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Promises returns 10 records",
                  "timedOut": null,
                  "duration": 829,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`)\n    .then((result) => {\n        assert.equal(result.length, 10)\n        done()\n    })",
                  "err": {},
                  "uuid": "810987bd-7ef2-482d-a692-78a3da6c4ef2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Promises returns single record",
                  "timedOut": null,
                  "duration": 530,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`)\n    .then((result) => {\n        assert.equal(result.length, 1)\n        done()\n    })",
                  "err": {},
                  "uuid": "aebb6909-240c-4255-8a2c-6d2387cf8a59",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Promises throws error with target table not found",
                  "timedOut": null,
                  "duration": 477,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY_DUMB`)\n                .then(() => {\n                    done(new Error(`Expected Exception but Received None`))\n                })\n                .catch(() => {\n                    done()\n                })",
                  "err": {},
                  "uuid": "5d0dd879-d672-4d9a-aa03-36b0ff63722c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "810987bd-7ef2-482d-a692-78a3da6c4ef2",
                "aebb6909-240c-4255-8a2c-6d2387cf8a59",
                "5d0dd879-d672-4d9a-aa03-36b0ff63722c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1836,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "4fd58576-3716-44ec-9ef7-3908e4a7ff29",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
          "file": "\\hana-client.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2c2d4d02-d9fe-4974-9985-8dadffbb6491",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
              "file": "\\hana-client.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 852,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "c473cf0e-0d03-473f-a734-e7a1e81c9f16",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 727,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "4f7ebdbd-915c-4e08-877d-252cc94c89ea",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 488,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "996b3135-527e-4db7-8165-36886f83fdfb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c473cf0e-0d03-473f-a734-e7a1e81c9f16",
                "4f7ebdbd-915c-4e08-877d-252cc94c89ea",
                "996b3135-527e-4db7-8165-36886f83fdfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2067,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "563e849d-7c5f-4e27-b890-aaf2f8054d5f",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
          "file": "\\hana-clientSync.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b48674eb-0034-42b8-b96c-391b635aa9b5",
              "title": "Example with Synchronous Calls",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
              "file": "\\hana-clientSync.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Synchronous Calls returns 10 records",
                  "timedOut": null,
                  "duration": 837,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "10de6b9b-62e0-47ad-97bc-d2977ad2070f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Synchronous Calls returns single record",
                  "timedOut": null,
                  "duration": 601,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "cf64ec59-3e95-4fbe-ad4f-5bd9027affd9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Synchronous Calls throws error with target table not found",
                  "timedOut": null,
                  "duration": 521,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.throws(() => { hanaClientSync.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "734ac45f-80c4-4da1-8d18-5df0fb9c0ce2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10de6b9b-62e0-47ad-97bc-d2977ad2070f",
                "cf64ec59-3e95-4fbe-ad4f-5bd9027affd9",
                "734ac45f-80c4-4da1-8d18-5df0fb9c0ce2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1959,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "11756689-10c9-4323-bd3d-bfff1944cfcb",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
          "file": "\\hdbextAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "afd5d1ba-9014-4ec5-a0e9-f76b20469828",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 762,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "423180ca-d05e-4015-85f3-e119d22fe4be",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Await returns single record",
                  "timedOut": null,
                  "duration": 546,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "38b551af-1c0b-470b-ad59-4f482364880a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbextAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "deffd20f-dd2d-42f8-999b-27b634b9a9c4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "423180ca-d05e-4015-85f3-e119d22fe4be",
                "38b551af-1c0b-470b-ad59-4f482364880a",
                "deffd20f-dd2d-42f8-999b-27b634b9a9c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1310,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "3a3f4175-c98d-4078-ad0f-b49fee36da9c",
              "title": "Example Stored Procedure with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 641,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TEST\" })\nassert.equal(result.outputScalar.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "860a2a09-9df4-4560-888e-b9434c6df505",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 613,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.outputScalar.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "072e9529-3a6d-4dad-b5ef-2c4771794ad8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Await throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => { await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', { PASSWORD: \"TESTtest1234\" }) }, Error)",
                  "err": {},
                  "uuid": "b45ec9d9-5423-48b8-b17c-e356d16ef454",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "860a2a09-9df4-4560-888e-b9434c6df505",
                "072e9529-3a6d-4dad-b5ef-2c4771794ad8",
                "b45ec9d9-5423-48b8-b17c-e356d16ef454"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1256,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "b2b49122-298c-4e2f-93f4-f02f88cfb606",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
          "file": "\\hdbext.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8f24143f-fbc5-47a7-91c0-4c4ebd65d52c",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 727,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "3c5da135-f174-4c0c-b4b1-93127f4b0244",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 497,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "cdf66f10-62af-4dbd-809b-f87a524fb284",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 504,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "45997120-127c-402a-a0ab-2865fc124b16",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c5da135-f174-4c0c-b4b1-93127f4b0244",
                "cdf66f10-62af-4dbd-809b-f87a524fb284",
                "45997120-127c-402a-a0ab-2865fc124b16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1728,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "68e9df4d-55be-4bcd-8ec0-c361623d2754",
              "title": "Example Stored Procedure with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 606,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TEST\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 412)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "aea58ba0-7389-4280-ad3a-eee487544fd9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 628,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 0)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "c4dda3f9-8257-46d7-8da2-245d6eb5832f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 655,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "71192e0a-9d27-47a5-9cc3-61cfb3a21e39",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aea58ba0-7389-4280-ad3a-eee487544fd9",
                "c4dda3f9-8257-46d7-8da2-245d6eb5832f",
                "71192e0a-9d27-47a5-9cc3-61cfb3a21e39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1889,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}