{
  "stats": {
    "suites": 22,
    "tests": 36,
    "passes": 36,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-01T16:29:37.408Z",
    "end": "2022-04-01T16:29:42.725Z",
    "duration": 5317,
    "testsRegistered": 36,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ea87294b-0534-4b7c-8965-4120249cd1d6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b574a971-aeba-4dd3-8b4e-dfd3926a77a4",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
          "file": "\\hana-clientAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d3a974d8-5517-4c0d-aef3-7de4893cd5ac",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
              "file": "\\hana-clientAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 1092,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "8417d573-e3ef-467b-a6dd-da8c5dd94496",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Await returns single record",
                  "timedOut": null,
                  "duration": 515,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "102b1c71-7ce3-4e40-bb8e-cb59197dcff6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hanaClientAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "cb3ebdda-1e95-4465-891a-f62fe8cf5986",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8417d573-e3ef-467b-a6dd-da8c5dd94496",
                "102b1c71-7ce3-4e40-bb8e-cb59197dcff6",
                "cb3ebdda-1e95-4465-891a-f62fe8cf5986"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1608,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "e20a8f48-50f6-4ecd-8656-81c6a43ff13a",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
          "file": "\\hdbAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "faf1d43f-d051-4e72-a4a7-3e57e69f3533",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
              "file": "\\hdbAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 647,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "d74511f3-000c-402a-97fd-03a128bd9c62",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Await returns single record",
                  "timedOut": null,
                  "duration": 551,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "74efcf6b-50a7-4b93-a332-a820a8533b7d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "021dfa7a-b30b-4352-9712-8ee129e79962",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d74511f3-000c-402a-97fd-03a128bd9c62",
                "74efcf6b-50a7-4b93-a332-a820a8533b7d",
                "021dfa7a-b30b-4352-9712-8ee129e79962"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1200,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "0ef15137-7980-4d16-94c1-a02ded28268e",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
          "file": "\\hdb.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d9c2ab9e-822d-4626-bc14-da8319ce1492",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
              "file": "\\hdb.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "3f354fe2-1c16-4048-8846-34556a2ef93f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 487,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "24b36367-2e36-4ba4-9dc8-ea7f42ca7647",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 487,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "c6250ad9-6237-4427-a6e7-bfdd1cd28eb4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f354fe2-1c16-4048-8846-34556a2ef93f",
                "24b36367-2e36-4ba4-9dc8-ea7f42ca7647",
                "c6250ad9-6237-4427-a6e7-bfdd1cd28eb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1597,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "68018fd9-65c6-495e-8adf-d4bd5339bbe0",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
          "file": "\\hana-clientPromise.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "97877d43-4ee5-434d-bd9f-8814eeb7c250",
              "title": "Example with Promises",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
              "file": "\\hana-clientPromise.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Promises returns 10 records",
                  "timedOut": null,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`)\n    .then((result) => {\n        assert.equal(result.length, 10)\n        done()\n    })",
                  "err": {},
                  "uuid": "03d75bf2-c01d-488f-8961-13c4a4ccbf55",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Promises returns single record",
                  "timedOut": null,
                  "duration": 518,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`)\n    .then((result) => {\n        assert.equal(result.length, 1)\n        done()\n    })",
                  "err": {},
                  "uuid": "f7c73357-4b5e-4bc8-b4a7-027504592ae6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Promises throws error with target table not found",
                  "timedOut": null,
                  "duration": 507,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY_DUMB`)\n                .then(() => {\n                    done(new Error(`Expected Exception but Received None`))\n                })\n                .catch(() => {\n                    done()\n                })",
                  "err": {},
                  "uuid": "7a6ea1c4-50c7-4842-b274-192c53045baf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03d75bf2-c01d-488f-8961-13c4a4ccbf55",
                "f7c73357-4b5e-4bc8-b4a7-027504592ae6",
                "7a6ea1c4-50c7-4842-b274-192c53045baf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2092,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "0ecf23d8-3fc6-4cb0-b384-4289f24f8833",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
          "file": "\\hana-clientSync.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2f3bf94b-a51f-4e25-abc5-048da250cd6c",
              "title": "Example with Synchronous Calls",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
              "file": "\\hana-clientSync.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Synchronous Calls returns 10 records",
                  "timedOut": null,
                  "duration": 1026,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "fdd0b834-d827-4973-aadb-94e603379311",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Synchronous Calls returns single record",
                  "timedOut": null,
                  "duration": 521,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "903c5380-2e59-4c71-9581-d4b0fd0e606b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Synchronous Calls throws error with target table not found",
                  "timedOut": null,
                  "duration": 511,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.throws(() => { hanaClientSync.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "ff3f6fe3-c8ba-458d-a903-c8d04e142f86",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdd0b834-d827-4973-aadb-94e603379311",
                "903c5380-2e59-4c71-9581-d4b0fd0e606b",
                "ff3f6fe3-c8ba-458d-a903-c8d04e142f86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2058,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "43e1672e-49ba-44e8-8613-6ce0eccde3fe",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
          "file": "\\hana-client.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a784946-b0b0-41b3-b507-ef68c3c8ec13",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
              "file": "\\hana-client.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 1150,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "ac3d39f1-2b6e-496a-93a5-57079e2440c5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 521,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "79e5ab45-43b6-47e4-a738-7f6c1b316952",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 516,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "e28c8d2f-f87d-41d1-ad59-11eb45520276",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac3d39f1-2b6e-496a-93a5-57079e2440c5",
                "79e5ab45-43b6-47e4-a738-7f6c1b316952",
                "e28c8d2f-f87d-41d1-ad59-11eb45520276"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2187,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "33c5fb68-e450-4e36-ae13-42964305eef1",
          "title": "cds",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
          "file": "\\cds.Test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"cds\"",
              "fullTitle": "cds \"before all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "sinon.stub(console, 'log')  // disable console.log\nsinon.stub(console, 'info')  // disable console.info",
              "err": {},
              "uuid": "b3d4a623-258d-4fdd-a45b-78928b20b1e8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"cds\"",
              "fullTitle": "cds \"after all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log.restore()\nconsole.info.restore()",
              "err": {},
              "uuid": "757b17c5-bb48-43b2-85ca-7d06f9c55acb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d7c97d57-38c2-4a12-bc96-d9d64ebefed4",
              "title": "Await example with CDL",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "cds Await example with CDL returns 10 records",
                  "timedOut": null,
                  "duration": 607,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = SELECT\n    .from(cds.db.entities.TABLES)\n    .columns(TABLES => {\n        TABLES.SCHEMA_NAME.as('SCHEMA'),\n            TABLES.TABLE_NAME\n    })\n    .limit(10)\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "c386ec0e-b1b2-4f47-9b0b-90bb158cca37",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c386ec0e-b1b2-4f47-9b0b-90bb158cca37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 607,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "870a2dfa-c59a-477c-97f9-0ca0c3316e09",
              "title": "Await example with Query as String",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "cds Await example with Query as String returns single record",
                  "timedOut": null,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "4cfe5944-ec65-4992-96d7-fdd209332462",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "cds Await example with Query as String throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await cds.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "058aa0b9-c7e4-4ffb-a0f4-cbe8c264c8c9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4cfe5944-ec65-4992-96d7-fdd209332462",
                "058aa0b9-c7e4-4ffb-a0f4-cbe8c264c8c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 69,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "df652df5-2be2-4072-97d3-0dee70492ac2",
              "title": "Await Example with Stored Procedure",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 243,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TEST\" })\nassert.equal(result.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "6ac3e549-3d6d-4fe5-a0a2-c6ab22e1340e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 182,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "d5554f21-328c-4748-b563-dbc98e2f1bad",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "cds Await Example with Stored Procedure throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => {\n    await cds.cdsLib.run(\n        ' Call SYS.IS_VALID_PASSWORD_NOT_A_PROC(PASSWORD => ?, ERROR_CODE => ?, ERROR_MESSAGE => ? )',\n        { PASSWORD: \"TESTtest1234\" })\n}, Error)",
                  "err": {},
                  "uuid": "c125f9a0-1ee7-4dce-83a8-5d5cb2313ba7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ac3e549-3d6d-4fe5-a0a2-c6ab22e1340e",
                "d5554f21-328c-4748-b563-dbc98e2f1bad",
                "c125f9a0-1ee7-4dce-83a8-5d5cb2313ba7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 425,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "544e0578-0161-4a36-9858-88ad48f3809e",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
          "file": "\\hdbextAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2ab8816-2c2b-4333-8d07-6f72ea6c85ad",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 881,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "f72c1904-4719-4a26-ab9a-b60cb73780b7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Await returns single record",
                  "timedOut": null,
                  "duration": 541,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "43e5cf00-64cd-44cb-873e-6a76c55fe1f6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbextAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "bd0cfcf7-924e-45b8-ad93-2d96672eff29",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f72c1904-4719-4a26-ab9a-b60cb73780b7",
                "43e5cf00-64cd-44cb-873e-6a76c55fe1f6",
                "bd0cfcf7-924e-45b8-ad93-2d96672eff29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1424,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "10ce412e-97be-4268-84c9-e8c1793646a2",
              "title": "Example Stored Procedure with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 643,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TEST\" })\nassert.equal(result.outputScalar.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "0df18875-8d13-4892-8810-6126347e93e3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 617,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.outputScalar.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "476f8e97-b0a8-4fc5-99d1-8c5d6b389257",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Await throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => { await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', { PASSWORD: \"TESTtest1234\" }) }, Error)",
                  "err": {},
                  "uuid": "67547669-a7a2-4db2-a53e-e0b04f0562ad",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0df18875-8d13-4892-8810-6126347e93e3",
                "476f8e97-b0a8-4fc5-99d1-8c5d6b389257",
                "67547669-a7a2-4db2-a53e-e0b04f0562ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1261,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "e5fc1f28-690c-4589-a423-5c8debc45073",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
          "file": "\\hdbext.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66ef918d-1573-4193-91f0-ccd07fb0d590",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 874,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "e616efd0-181a-4853-b86e-3e7f206a0e2b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 547,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "418261ea-f2d3-46c0-831d-32268ea2eb4e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 502,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "af99b626-840c-4902-bf25-69e60f1306f0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e616efd0-181a-4853-b86e-3e7f206a0e2b",
                "418261ea-f2d3-46c0-831d-32268ea2eb4e",
                "af99b626-840c-4902-bf25-69e60f1306f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1923,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "b9fee314-e674-49a8-8341-08874f332706",
              "title": "Example Stored Procedure with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 644,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TEST\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 412)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "648dfc83-820a-4ae9-a0d9-cddb237b140d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 649,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 0)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "62e34848-fa3b-4190-a15f-a96f8fb600bc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "ff3b5c6a-d64f-4c47-8f5e-eb548df90df5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "648dfc83-820a-4ae9-a0d9-cddb237b140d",
                "62e34848-fa3b-4190-a15f-a96f8fb600bc",
                "ff3b5c6a-d64f-4c47-8f5e-eb548df90df5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2013,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}