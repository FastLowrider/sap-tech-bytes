{
  "stats": {
    "suites": 22,
    "tests": 36,
    "passes": 36,
    "pending": 0,
    "failures": 0,
    "start": "2022-03-30T21:33:21.641Z",
    "end": "2022-03-30T21:33:26.681Z",
    "duration": 5040,
    "testsRegistered": 36,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7e42371b-7104-4d60-a240-4e4842d5da79",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2da66d5c-f32e-4e33-96ed-6b22056593d1",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
          "file": "\\hana-clientAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3a75d77-331c-47e6-8e35-90273ba7e720",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
              "file": "\\hana-clientAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 892,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "f8cb0c2b-0e5e-4f5c-96ea-55d6d10928d1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Await returns single record",
                  "timedOut": null,
                  "duration": 492,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "1b7ab45c-b6c8-470b-ba04-42c2dfa7498a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hanaClientAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "c0027142-b3a0-4685-80bf-7435d07fa62b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8cb0c2b-0e5e-4f5c-96ea-55d6d10928d1",
                "1b7ab45c-b6c8-470b-ba04-42c2dfa7498a",
                "c0027142-b3a0-4685-80bf-7435d07fa62b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1386,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "64ec1da9-259d-4956-a578-82f45050dd23",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
          "file": "\\hdbAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe674e19-4d71-427b-86b4-3d8f2e8af926",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
              "file": "\\hdbAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 651,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "9cb6a2e6-a6ed-4946-8fc6-2700172a5464",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Await returns single record",
                  "timedOut": null,
                  "duration": 538,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "551a7def-a5e6-4635-8e11-140f1b390e9a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "4619743a-cdbb-49fe-b902-df47fbe0cb69",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cb6a2e6-a6ed-4946-8fc6-2700172a5464",
                "551a7def-a5e6-4635-8e11-140f1b390e9a",
                "4619743a-cdbb-49fe-b902-df47fbe0cb69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1190,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "0c5b3a07-5913-4099-a95d-df60b1f76c48",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
          "file": "\\hana-client.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9e5ef78-1dc2-4a7e-a0d3-c4c9b9b77bbd",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
              "file": "\\hana-client.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 930,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "4d70bad6-c753-4507-a131-2860f0da948d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 511,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "6788c625-0ac4-4d4a-81f9-c2716cfd9782",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "09aaeaf7-21df-40a8-b096-9f2fa543ec6a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d70bad6-c753-4507-a131-2860f0da948d",
                "6788c625-0ac4-4d4a-81f9-c2716cfd9782",
                "09aaeaf7-21df-40a8-b096-9f2fa543ec6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1951,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "81af1d8c-7a13-4595-afbd-30d84698ac19",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
          "file": "\\hdb.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a19b9b22-9123-4530-8e70-128605a3b5b5",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
              "file": "\\hdb.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 613,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "2b3e383b-2ea2-4c0c-af72-cb480da3a763",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 514,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "e5845711-1b68-46f5-80e7-448a5f01c8d3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 481,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "b5c16b5d-3b16-4bd2-b6fd-d916eb0f72bd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b3e383b-2ea2-4c0c-af72-cb480da3a763",
                "e5845711-1b68-46f5-80e7-448a5f01c8d3",
                "b5c16b5d-3b16-4bd2-b6fd-d916eb0f72bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1608,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "def54676-1e11-4cc6-bf01-ffe0446aad32",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
          "file": "\\hana-clientPromise.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b5643e88-72f6-43e2-b34b-cde3297770b6",
              "title": "Example with Promises",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
              "file": "\\hana-clientPromise.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Promises returns 10 records",
                  "timedOut": null,
                  "duration": 905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`)\n    .then((result) => {\n        assert.equal(result.length, 10)\n        done()\n    })",
                  "err": {},
                  "uuid": "8bdd63b9-6903-4476-8932-2c97648548a8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Promises returns single record",
                  "timedOut": null,
                  "duration": 524,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`)\n    .then((result) => {\n        assert.equal(result.length, 1)\n        done()\n    })",
                  "err": {},
                  "uuid": "ed6212e7-2f6f-4e51-b638-84701c2f1e84",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Promises throws error with target table not found",
                  "timedOut": null,
                  "duration": 527,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY_DUMB`)\n                .then(() => {\n                    done(new Error(`Expected Exception but Received None`))\n                })\n                .catch(() => {\n                    done()\n                })",
                  "err": {},
                  "uuid": "01a54261-b68c-4fdb-a006-d350433a3610",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bdd63b9-6903-4476-8932-2c97648548a8",
                "ed6212e7-2f6f-4e51-b638-84701c2f1e84",
                "01a54261-b68c-4fdb-a006-d350433a3610"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1956,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "4fb2f081-3af6-4f8e-bff7-32c500263abf",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
          "file": "\\hana-clientSync.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14487afc-48d7-4ef1-a35c-ec49a229fc86",
              "title": "Example with Synchronous Calls",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
              "file": "\\hana-clientSync.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Synchronous Calls returns 10 records",
                  "timedOut": null,
                  "duration": 840,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "2ead7778-baac-4297-8cb4-6464c6698baf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Synchronous Calls returns single record",
                  "timedOut": null,
                  "duration": 529,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "55acbbe1-384c-4e40-abab-4bc5332ff059",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Synchronous Calls throws error with target table not found",
                  "timedOut": null,
                  "duration": 523,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.throws(() => { hanaClientSync.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "f0ef1921-1fc1-4b60-84b4-a989b3a11201",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ead7778-baac-4297-8cb4-6464c6698baf",
                "55acbbe1-384c-4e40-abab-4bc5332ff059",
                "f0ef1921-1fc1-4b60-84b4-a989b3a11201"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1892,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "2f8eac5b-b703-4819-9c19-82202b70814c",
          "title": "cds",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
          "file": "\\cds.Test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"cds\"",
              "fullTitle": "cds \"before all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "sinon.stub(console, 'log')  // disable console.log\nsinon.stub(console, 'info')  // disable console.info",
              "err": {},
              "uuid": "76740761-7ab4-4621-babc-7a4ad0382828",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"cds\"",
              "fullTitle": "cds \"after all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log.restore()\nconsole.info.restore()",
              "err": {},
              "uuid": "82e64b8a-0626-48f1-a257-be878561d51d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6518b0bd-83d0-4184-acc7-ec94c9146076",
              "title": "Await example with CDL",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "cds Await example with CDL returns 10 records",
                  "timedOut": null,
                  "duration": 609,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = SELECT\n    .from(cds.db.entities.TABLES)\n    .columns(TABLES => {\n        TABLES.SCHEMA_NAME.as('SCHEMA'),\n            TABLES.TABLE_NAME\n    })\n    .limit(10)\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "3c24c0c9-46d9-4216-adf8-a8a31dff9bd4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c24c0c9-46d9-4216-adf8-a8a31dff9bd4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 609,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "fb65f6f7-8e1d-43a7-a89b-f85f3fd1cd2c",
              "title": "Await example with Query as String",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "cds Await example with Query as String returns single record",
                  "timedOut": null,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "c9f60949-50d7-45ce-b015-7b428821eb21",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "cds Await example with Query as String throws error with target table not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await cds.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "7b2f412d-565f-4342-b63c-9393e1dfaabb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9f60949-50d7-45ce-b015-7b428821eb21",
                "7b2f412d-565f-4342-b63c-9393e1dfaabb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "8cd5e601-01e2-4a27-a476-39aa4e71ffc0",
              "title": "Await Example with Stored Procedure",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 256,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TEST\" })\nassert.equal(result.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "c0339f70-7838-440f-b1c0-d59469e3e231",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "9be52aaa-48f6-4a9f-9f91-4e4fd424577c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "cds Await Example with Stored Procedure throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => {\n    await cds.cdsLib.run(\n        ' Call SYS.IS_VALID_PASSWORD_NOT_A_PROC(PASSWORD => ?, ERROR_CODE => ?, ERROR_MESSAGE => ? )',\n        { PASSWORD: \"TESTtest1234\" })\n}, Error)",
                  "err": {},
                  "uuid": "68ce82ba-77ea-4354-86d2-e9c2704865f2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0339f70-7838-440f-b1c0-d59469e3e231",
                "9be52aaa-48f6-4a9f-9f91-4e4fd424577c",
                "68ce82ba-77ea-4354-86d2-e9c2704865f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 455,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "a9258d06-9207-41bf-80e9-1251e46a7930",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
          "file": "\\hdbextAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fb73f750-fcf5-4d41-a6bb-2f23b3aa1d5b",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 797,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "7e2eb2ea-3212-4d93-8b08-03a2a5e9b7e3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Await returns single record",
                  "timedOut": null,
                  "duration": 544,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "11f5b3c3-9be2-40fd-8044-ce2f9419f307",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbextAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "0b7b7f90-72c2-4236-b869-d4aa3422f12d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e2eb2ea-3212-4d93-8b08-03a2a5e9b7e3",
                "11f5b3c3-9be2-40fd-8044-ce2f9419f307",
                "0b7b7f90-72c2-4236-b869-d4aa3422f12d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1343,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "ae4c81c0-ea47-4571-8a40-790b26784031",
              "title": "Example Stored Procedure with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 651,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TEST\" })\nassert.equal(result.outputScalar.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "063ae2d4-1f51-4778-bbf9-a12be6c71f6a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 637,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.outputScalar.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "4e306a68-7206-480f-8eda-7077fe9aa151",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Await throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => { await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', { PASSWORD: \"TESTtest1234\" }) }, Error)",
                  "err": {},
                  "uuid": "d868e39d-929f-47f3-867d-339b99f7c730",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "063ae2d4-1f51-4778-bbf9-a12be6c71f6a",
                "4e306a68-7206-480f-8eda-7077fe9aa151",
                "d868e39d-929f-47f3-867d-339b99f7c730"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1289,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "33504252-e570-4046-96d0-264233221d4c",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
          "file": "\\hdbext.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05f74926-dab6-4eac-ae01-8d4c1f909584",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 795,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "6c947162-b60f-4df9-8354-44cbb03cdc12",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 532,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "884d5f35-f222-4a52-aa47-65211b0a25ce",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 519,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "14917c46-78a4-4ba7-a8e3-f445760f4f7f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c947162-b60f-4df9-8354-44cbb03cdc12",
                "884d5f35-f222-4a52-aa47-65211b0a25ce",
                "14917c46-78a4-4ba7-a8e3-f445760f4f7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1846,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "a0d1e2e3-8952-4968-9c26-8db74ef7bc1b",
              "title": "Example Stored Procedure with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 603,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TEST\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 412)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "dac86e8b-0435-42dd-b5c8-5a7a27e93b67",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 626,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 0)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "2e8b0ae5-06b2-4675-97a2-7648078813dc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 777,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "09edc918-ba7e-4252-8715-9cd3b3ce3dae",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dac86e8b-0435-42dd-b5c8-5a7a27e93b67",
                "2e8b0ae5-06b2-4675-97a2-7648078813dc",
                "09edc918-ba7e-4252-8715-9cd3b3ce3dae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2006,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}