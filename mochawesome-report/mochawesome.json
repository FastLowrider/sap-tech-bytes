{
  "stats": {
    "suites": 22,
    "tests": 36,
    "passes": 36,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-29T20:13:30.252Z",
    "end": "2022-04-29T20:13:35.283Z",
    "duration": 5031,
    "testsRegistered": 36,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4dcd1a54-b61b-4aef-9f09-b0d0112efaa1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d92bac42-71d7-4e4c-85e6-37320d5e7871",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
          "file": "\\hana-clientAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8c4740c-de7a-4ed1-8162-335db1e9d15a",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
              "file": "\\hana-clientAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 930,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "f67a24e1-6c1a-4755-b0f7-f927e04ba6ba",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Await returns single record",
                  "timedOut": null,
                  "duration": 485,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "e4d3c95f-e7f1-4209-ab37-fab3ca4bd734",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hanaClientAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "1c1cfb48-ef20-48e3-97c0-dbe73a3b3ab7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f67a24e1-6c1a-4755-b0f7-f927e04ba6ba",
                "e4d3c95f-e7f1-4209-ab37-fab3ca4bd734",
                "1c1cfb48-ef20-48e3-97c0-dbe73a3b3ab7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1416,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "61ae95ff-4a99-4fc3-84b8-b7a010d5436e",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
          "file": "\\hdbAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a86bbccb-d326-4906-b539-a87f557a8d6e",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
              "file": "\\hdbAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 591,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "6371e2a1-d913-41d9-8c75-74f82205143b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Await returns single record",
                  "timedOut": null,
                  "duration": 484,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "64c36650-77e5-4f21-85f7-21c0ea7554d1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "74f14f82-03c6-4c5b-a7b6-8486c7afef97",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6371e2a1-d913-41d9-8c75-74f82205143b",
                "64c36650-77e5-4f21-85f7-21c0ea7554d1",
                "74f14f82-03c6-4c5b-a7b6-8486c7afef97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1076,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "f003f938-5f27-4fc6-8763-b6b724cdeb65",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
          "file": "\\hana-client.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "533c05c5-fe40-4a22-a384-7dfbecc47676",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
              "file": "\\hana-client.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 969,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "0210fc16-b55f-4fbf-b36a-99dba8c581c0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 467,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "fb218fc4-a6e3-4493-8ce5-7d2455f10053",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 507,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "1842b9ce-1347-4f00-aea8-d2239fefa59a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0210fc16-b55f-4fbf-b36a-99dba8c581c0",
                "fb218fc4-a6e3-4493-8ce5-7d2455f10053",
                "1842b9ce-1347-4f00-aea8-d2239fefa59a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1943,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5be564d2-3a69-4271-825a-359159eaf432",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
          "file": "\\hdb.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "39b2d95c-6593-4a79-aa33-b5b3b14e7fe6",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
              "file": "\\hdb.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 601,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "1967f184-d0f0-49f8-841e-e13bace312b8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 467,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "0d127960-a5a4-4b7a-9bca-79282f6f9862",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 465,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "f7e00d76-6c46-4e42-8d57-69f5c036f734",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1967f184-d0f0-49f8-841e-e13bace312b8",
                "0d127960-a5a4-4b7a-9bca-79282f6f9862",
                "f7e00d76-6c46-4e42-8d57-69f5c036f734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1533,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "f01a67bf-0ea2-49bd-a680-bccec52bc5ee",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
          "file": "\\hana-clientPromise.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43053b31-c0cc-45fd-b23e-f91cc90af137",
              "title": "Example with Promises",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
              "file": "\\hana-clientPromise.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Promises returns 10 records",
                  "timedOut": null,
                  "duration": 901,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`)\n    .then((result) => {\n        assert.equal(result.length, 10)\n        done()\n    })",
                  "err": {},
                  "uuid": "50add5b4-4fc1-4d4d-a27c-17d1c258f841",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Promises returns single record",
                  "timedOut": null,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`)\n    .then((result) => {\n        assert.equal(result.length, 1)\n        done()\n    })",
                  "err": {},
                  "uuid": "ad828bfd-9fd7-43cf-b952-a17bf35965fb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Promises throws error with target table not found",
                  "timedOut": null,
                  "duration": 499,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY_DUMB`)\n                .then(() => {\n                    done(new Error(`Expected Exception but Received None`))\n                })\n                .catch(() => {\n                    done()\n                })",
                  "err": {},
                  "uuid": "60e72018-f70c-4552-9167-a089031c0035",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50add5b4-4fc1-4d4d-a27c-17d1c258f841",
                "ad828bfd-9fd7-43cf-b952-a17bf35965fb",
                "60e72018-f70c-4552-9167-a089031c0035"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1891,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "3e87d2d0-fc40-483a-a192-2068460a7709",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
          "file": "\\hana-clientSync.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5aa23244-965f-43bb-9819-544b0eb5f7fa",
              "title": "Example with Synchronous Calls",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
              "file": "\\hana-clientSync.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Synchronous Calls returns 10 records",
                  "timedOut": null,
                  "duration": 855,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "6b8c9d54-5c44-4174-b537-2422e92ec8b1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Synchronous Calls returns single record",
                  "timedOut": null,
                  "duration": 486,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "71816407-5ca5-46b5-ab4b-757dbe15c121",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Synchronous Calls throws error with target table not found",
                  "timedOut": null,
                  "duration": 500,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.throws(() => { hanaClientSync.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "e892ebe0-ae14-4546-8ac1-6050f98323e6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b8c9d54-5c44-4174-b537-2422e92ec8b1",
                "71816407-5ca5-46b5-ab4b-757dbe15c121",
                "e892ebe0-ae14-4546-8ac1-6050f98323e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1841,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "a39813b4-c6fa-4d88-86d6-33db52c4262e",
          "title": "cds",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
          "file": "\\cds.Test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"cds\"",
              "fullTitle": "cds \"before all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "sinon.stub(console, 'log')  // disable console.log\nsinon.stub(console, 'info')  // disable console.info",
              "err": {},
              "uuid": "8b5ae71f-bf1e-4106-9965-cc0054781daf",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"cds\"",
              "fullTitle": "cds \"after all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log.restore()\nconsole.info.restore()",
              "err": {},
              "uuid": "5d0ffabd-4cdb-4d69-9298-2defeac5fe62",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5de3b57c-5968-46f1-bc52-0d99c6c7eaa5",
              "title": "Await example with CDL",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "cds Await example with CDL returns 10 records",
                  "timedOut": null,
                  "duration": 603,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = SELECT\n    .from(cds.db.entities.TABLES)\n    .columns(TABLES => {\n        TABLES.SCHEMA_NAME.as('SCHEMA'),\n            TABLES.TABLE_NAME\n    })\n    .limit(10)\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "78720cf8-ee9f-4b07-98bc-4d4ecd41e178",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78720cf8-ee9f-4b07-98bc-4d4ecd41e178"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 603,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "f8871580-1127-4dc3-a9ff-a9566ec498b4",
              "title": "Await example with Query as String",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "cds Await example with Query as String returns single record",
                  "timedOut": null,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "807a80be-4110-47ef-ad09-2c90de8eaa0e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "cds Await example with Query as String throws error with target table not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await cds.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "5f59a337-8d60-428a-b2fa-da0583e6a81f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "807a80be-4110-47ef-ad09-2c90de8eaa0e",
                "5f59a337-8d60-428a-b2fa-da0583e6a81f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "a5e351c6-649f-4f3a-a504-c16c6beb6a4e",
              "title": "Await Example with Stored Procedure",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 267,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TEST\" })\nassert.equal(result.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "2f438261-2e5d-48b6-a5c8-20d7badaeafc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 201,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "249eb29e-ea72-463f-93e0-40d03dcfdc15",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "cds Await Example with Stored Procedure throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => {\n    await cds.cdsLib.run(\n        ' Call SYS.IS_VALID_PASSWORD_NOT_A_PROC(PASSWORD => ?, ERROR_CODE => ?, ERROR_MESSAGE => ? )',\n        { PASSWORD: \"TESTtest1234\" })\n}, Error)",
                  "err": {},
                  "uuid": "d24a7b4f-eb90-47c8-a3f0-e170c998032c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f438261-2e5d-48b6-a5c8-20d7badaeafc",
                "249eb29e-ea72-463f-93e0-40d03dcfdc15",
                "d24a7b4f-eb90-47c8-a3f0-e170c998032c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 468,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "44f91f1d-9594-4125-b38f-7ff1a82ecb77",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
          "file": "\\hdbextAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f64658d5-4ffb-46b8-9142-da86644ed68b",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 824,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "a6d10e60-edb3-4c55-a9cb-b8424db882f9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Await returns single record",
                  "timedOut": null,
                  "duration": 568,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "37955334-22f7-4402-8c9f-35a90361dc0a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbextAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "08f26c40-ee18-4f60-b298-105fa7f76c88",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6d10e60-edb3-4c55-a9cb-b8424db882f9",
                "37955334-22f7-4402-8c9f-35a90361dc0a",
                "08f26c40-ee18-4f60-b298-105fa7f76c88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1393,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "92f97a45-0554-4b64-95f8-993e16ab28f2",
              "title": "Example Stored Procedure with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 601,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TEST\" })\nassert.equal(result.outputScalar.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "a5cc5e75-d749-444b-8490-21f0f1042d68",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 589,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.outputScalar.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "dbf24c60-aee2-43eb-aeac-bca028b3ddd7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Await throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => { await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', { PASSWORD: \"TESTtest1234\" }) }, Error)",
                  "err": {},
                  "uuid": "d0fee5e2-8966-4fd8-82ac-cb57eb2467e0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5cc5e75-d749-444b-8490-21f0f1042d68",
                "dbf24c60-aee2-43eb-aeac-bca028b3ddd7",
                "d0fee5e2-8966-4fd8-82ac-cb57eb2467e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1194,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "e5c1e649-d2e1-4e00-8993-4474f3c930fd",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
          "file": "\\hdbext.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3bc6798-ee1f-4293-aa8e-213b67e42581",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 812,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "ba767eca-2b67-4450-8f98-44acb8ce9405",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "db48cbe5-74e7-4572-afa8-a209ad36f1f9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 502,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "e0ca54c5-aaea-44a2-834f-5098fab87e78",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba767eca-2b67-4450-8f98-44acb8ce9405",
                "db48cbe5-74e7-4572-afa8-a209ad36f1f9",
                "e0ca54c5-aaea-44a2-834f-5098fab87e78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1824,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "8d3c3a27-91e7-43ce-b005-618dadd7bed6",
              "title": "Example Stored Procedure with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 633,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TEST\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 412)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "1bfb4a2a-c2b5-45ca-9a62-7e39f3d245dd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 632,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 0)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "94084d5e-cee9-4628-9975-b4e626f0b8b7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 649,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "4fd0325e-34a2-4d2b-b91b-e5ef36204a85",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bfb4a2a-c2b5-45ca-9a62-7e39f3d245dd",
                "94084d5e-cee9-4628-9975-b4e626f0b8b7",
                "4fd0325e-34a2-4d2b-b91b-e5ef36204a85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1914,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}