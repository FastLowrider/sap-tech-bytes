{
  "stats": {
    "suites": 22,
    "tests": 36,
    "passes": 36,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-10T19:11:05.227Z",
    "end": "2022-05-10T19:11:10.070Z",
    "duration": 4843,
    "testsRegistered": 36,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a6b9e291-04ed-448b-b4e2-b10395e01dc0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ea7783fd-6713-44bd-a35b-55e3ea9218cb",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
          "file": "\\hana-clientAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eb44ad31-7cc8-4d4a-88aa-480702d56cc5",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientAwait.Test.js",
              "file": "\\hana-clientAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 895,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "a81f8cb2-f507-4b1e-a93c-73955fd6a8e4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Await returns single record",
                  "timedOut": null,
                  "duration": 535,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hanaClientAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "bf35c25c-6597-4ce8-a606-b71c3eb01adc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hanaClientAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "8da185b7-4401-438b-8494-6783a8323da5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a81f8cb2-f507-4b1e-a93c-73955fd6a8e4",
                "bf35c25c-6597-4ce8-a606-b71c3eb01adc",
                "8da185b7-4401-438b-8494-6783a8323da5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1431,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "f646fcbb-5272-4e87-be4c-fb81b7195c0d",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
          "file": "\\hdbAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec19b22d-f113-4f52-a4db-74c76922cd91",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbAwait.Test.js",
              "file": "\\hdbAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "0793aa81-ffe2-4b94-995a-1e8f9371a041",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Await returns single record",
                  "timedOut": null,
                  "duration": 510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "b663b6b8-77a2-4dd3-b8f6-a4b9f18f9385",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "cb4e71a2-645f-4117-843f-d72df9230edc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0793aa81-ffe2-4b94-995a-1e8f9371a041",
                "b663b6b8-77a2-4dd3-b8f6-a4b9f18f9385",
                "cb4e71a2-645f-4117-843f-d72df9230edc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1135,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "951227de-60fd-44db-b8a1-4bd9c7710f69",
          "title": "hdb",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
          "file": "\\hdb.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a1f6f60-c51a-49b4-8f0c-803de8745070",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdb.Test.js",
              "file": "\\hdb.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdb Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 576,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "550b7059-131a-4edf-a97d-5ac6871c4215",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdb Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 480,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "ef374b05-d651-41a8-83e0-596cfffda244",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdb Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 463,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdb.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "fe65ee2f-ecb8-47bb-9268-2de070805250",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "550b7059-131a-4edf-a97d-5ac6871c4215",
                "ef374b05-d651-41a8-83e0-596cfffda244",
                "fe65ee2f-ecb8-47bb-9268-2de070805250"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1519,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "be693781-a313-479c-97d9-609f6bcd2eb8",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
          "file": "\\hana-client.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "731164be-f0bc-4141-a69f-0c0cb4d8acdf",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-client.Test.js",
              "file": "\\hana-client.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 926,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "9c2e34a5-c457-4f94-92b3-6471f3da9012",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "7aec6e06-da29-4b27-b4f8-6f2b9daa19d3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 483,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "084ac4ef-c4b3-4974-8c8a-69e2135c8550",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c2e34a5-c457-4f94-92b3-6471f3da9012",
                "7aec6e06-da29-4b27-b4f8-6f2b9daa19d3",
                "084ac4ef-c4b3-4974-8c8a-69e2135c8550"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1900,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "ba03110f-43b0-41f8-8f67-3e7eeeca0a91",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
          "file": "\\hana-clientSync.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "46bdb5d5-d97c-4147-8793-7ddce5bc5c2d",
              "title": "Example with Synchronous Calls",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientSync.Test.js",
              "file": "\\hana-clientSync.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Synchronous Calls returns 10 records",
                  "timedOut": null,
                  "duration": 876,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "a64d4612-474d-4e8c-9dda-87297359c4b9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Synchronous Calls returns single record",
                  "timedOut": null,
                  "duration": 480,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = hanaClientSync.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "33b5c040-186d-4c9a-b7e9-02a61dbf2ba9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Synchronous Calls throws error with target table not found",
                  "timedOut": null,
                  "duration": 496,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.throws(() => { hanaClientSync.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "518da0f8-7fba-41b6-93a2-c20d5fdaa533",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a64d4612-474d-4e8c-9dda-87297359c4b9",
                "33b5c040-186d-4c9a-b7e9-02a61dbf2ba9",
                "518da0f8-7fba-41b6-93a2-c20d5fdaa533"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1852,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "93bc7539-3585-42af-b502-ea471c70403c",
          "title": "hana-client",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
          "file": "\\hana-clientPromise.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b307b22-be3d-4943-a855-e3e4640c1f7e",
              "title": "Example with Promises",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hana-clientPromise.Test.js",
              "file": "\\hana-clientPromise.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hana-client Example with Promises returns 10 records",
                  "timedOut": null,
                  "duration": 908,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`)\n    .then((result) => {\n        assert.equal(result.length, 10)\n        done()\n    })",
                  "err": {},
                  "uuid": "3a9546a7-6fe1-47b2-b0e0-befed220f557",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hana-client Example with Promises returns single record",
                  "timedOut": null,
                  "duration": 496,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`)\n    .then((result) => {\n        assert.equal(result.length, 1)\n        done()\n    })",
                  "err": {},
                  "uuid": "5609846f-05b1-4e89-a83b-a653b90478dd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hana-client Example with Promises throws error with target table not found",
                  "timedOut": null,
                  "duration": 503,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hanaClientPromise.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY_DUMB`)\n                .then(() => {\n                    done(new Error(`Expected Exception but Received None`))\n                })\n                .catch(() => {\n                    done()\n                })",
                  "err": {},
                  "uuid": "b34b33c7-be2a-4777-9a36-2b0be85b18bf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a9546a7-6fe1-47b2-b0e0-befed220f557",
                "5609846f-05b1-4e89-a83b-a653b90478dd",
                "b34b33c7-be2a-4777-9a36-2b0be85b18bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1907,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "98834125-ad7e-4fbc-9183-75b7efad9011",
          "title": "cds",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
          "file": "\\cds.Test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"cds\"",
              "fullTitle": "cds \"before all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "sinon.stub(console, 'log')  // disable console.log\nsinon.stub(console, 'info')  // disable console.info",
              "err": {},
              "uuid": "24af2697-dd19-47ee-b9a0-e1570817d192",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"cds\"",
              "fullTitle": "cds \"after all\" hook in \"cds\"",
              "timedOut": null,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "console.log.restore()\nconsole.info.restore()",
              "err": {},
              "uuid": "2178afa8-4648-46f3-805f-2bc11b596d3b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e0f5a3ea-c522-46bb-ba60-add66d7e4143",
              "title": "Await example with CDL",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "cds Await example with CDL returns 10 records",
                  "timedOut": null,
                  "duration": 571,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = SELECT\n    .from(cds.db.entities.TABLES)\n    .columns(TABLES => {\n        TABLES.SCHEMA_NAME.as('SCHEMA'),\n            TABLES.TABLE_NAME\n    })\n    .limit(10)\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "d3d40f7f-dfb6-4751-99e1-cd339d7d6fe3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3d40f7f-dfb6-4751-99e1-cd339d7d6fe3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 571,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "be56d9b7-c800-4513-bf12-fd3a7af1cda2",
              "title": "Await example with Query as String",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "cds Await example with Query as String returns single record",
                  "timedOut": null,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await cds.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "02391b7d-d26b-41a1-962e-76448e5e67cc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "cds Await example with Query as String throws error with target table not found",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await cds.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "b70ab3a2-5e73-4630-b4f7-c4f74a0f4055",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02391b7d-d26b-41a1-962e-76448e5e67cc",
                "b70ab3a2-5e73-4630-b4f7-c4f74a0f4055"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "7722b2f4-6c06-4af5-8c4a-f18fb9909c64",
              "title": "Await Example with Stored Procedure",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\cds.Test.js",
              "file": "\\cds.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 249,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TEST\" })\nassert.equal(result.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "86059d0b-ec47-4b8a-a3c6-70a7c7d1f51d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "cds Await Example with Stored Procedure Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await cds.cdsLib.run(dbQuery, { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "73774b5a-8a9a-4148-a46e-1aacf3196b02",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "cds Await Example with Stored Procedure throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => {\n    await cds.cdsLib.run(\n        ' Call SYS.IS_VALID_PASSWORD_NOT_A_PROC(PASSWORD => ?, ERROR_CODE => ?, ERROR_MESSAGE => ? )',\n        { PASSWORD: \"TESTtest1234\" })\n}, Error)",
                  "err": {},
                  "uuid": "3f8d6cce-f685-4bee-a12e-d70b6f33d7c7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86059d0b-ec47-4b8a-a3c6-70a7c7d1f51d",
                "73774b5a-8a9a-4148-a46e-1aacf3196b02",
                "3f8d6cce-f685-4bee-a12e-d70b6f33d7c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 434,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "058eae3f-0392-4840-8cd1-3bf638bdf582",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
          "file": "\\hdbextAwait.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45b6e998-f7e3-4f1c-bcae-61bff3a0e3b8",
              "title": "Example with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Await returns 10 records",
                  "timedOut": null,
                  "duration": 799,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 10)",
                  "err": {},
                  "uuid": "7375424c-47d8-49d4-a242-f0b119dfd05c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Await returns single record",
                  "timedOut": null,
                  "duration": 546,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY`\nconst results = await hdbextAwait.example1(dbQuery)\nassert.equal(results.length, 1)",
                  "err": {},
                  "uuid": "f3302da2-dab1-4141-9b58-4267e459f5c7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Await throws error with target table not found",
                  "timedOut": null,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let dbQuery = `SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`\nassert.rejects(async () => { await hdbextAwait.example1(dbQuery) }, Error)",
                  "err": {},
                  "uuid": "1cf905a5-da78-43e8-8410-7448ccedc1b3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7375424c-47d8-49d4-a242-f0b119dfd05c",
                "f3302da2-dab1-4141-9b58-4267e459f5c7",
                "1cf905a5-da78-43e8-8410-7448ccedc1b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1347,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "d99cb2f7-f89d-46da-9add-64549a53e397",
              "title": "Example Stored Procedure with Await",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbextAwait.Test.js",
              "file": "\\hdbextAwait.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 629,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TEST\" })\nassert.equal(result.outputScalar.ERROR_CODE, 412)",
                  "err": {},
                  "uuid": "cdd05ebe-91a2-4021-bb2a-4e5d86cc79bb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Await Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let result = await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD', { PASSWORD: \"TESTtest1234\" })\nassert.equal(result.outputScalar.ERROR_CODE, 0)",
                  "err": {},
                  "uuid": "e7d5b8f8-7838-48d6-b912-b6c0e30be144",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Await throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.rejects(async () => { await hdbextAwait.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', { PASSWORD: \"TESTtest1234\" }) }, Error)",
                  "err": {},
                  "uuid": "0a5886e9-d88f-4536-b222-1bd9e4901827",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdd05ebe-91a2-4021-bb2a-4e5d86cc79bb",
                "e7d5b8f8-7838-48d6-b912-b6c0e30be144",
                "0a5886e9-d88f-4536-b222-1bd9e4901827"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1292,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5f5ea6dd-e410-4370-8292-8a98bf2b5bac",
          "title": "hdbext",
          "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
          "file": "\\hdbext.Test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a482b473-d241-4e32-8dda-2c9c0ac21a53",
              "title": "Example with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns single record",
                  "fullTitle": "hdbext Example with Callbacks returns single record",
                  "timedOut": null,
                  "duration": 779,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA FROM DUMMY`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 1)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "c202ab7f-8433-42db-acee-6066ab16b433",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with target table not found",
                  "fullTitle": "hdbext Example with Callbacks throws error with target table not found",
                  "timedOut": null,
                  "duration": 496,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT CURRENT_USER, CURRENT_SCHEMA from DUMMY_DUMB`, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "2df9fd29-6851-49e1-a476-de9258de9492",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 10 records",
                  "fullTitle": "hdbext Example with Callbacks returns 10 records",
                  "timedOut": null,
                  "duration": 486,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example1(`SELECT SCHEMA_NAME, TABLE_NAME, COMMENTS FROM TABLES LIMIT 10`, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.length, 10)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "f5abe334-1d9d-4e79-9dfd-a0b407744937",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c202ab7f-8433-42db-acee-6066ab16b433",
                "2df9fd29-6851-49e1-a476-de9258de9492",
                "f5abe334-1d9d-4e79-9dfd-a0b407744937"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1761,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "1b0356f7-92fc-4037-ad5f-139395aee801",
              "title": "Example Stored Procedure with Callbacks",
              "fullFile": "C:\\SAPDevelop\\git\\sap-tech-bytes-public\\hdbext.Test.js",
              "file": "\\hdbext.Test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Password is too short - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is too short - Error Code 412",
                  "timedOut": null,
                  "duration": 657,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TEST\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 412)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "7dfc0a55-f2d5-4045-a6b3-799818cae6e4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Password is good - Error Code 412",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks Password is good - Error Code 412",
                  "timedOut": null,
                  "duration": 602,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done(err)\n    } else {\n        assert.equal(result.ERROR_CODE, 0)\n        done()\n    }\n})",
                  "err": {},
                  "uuid": "ef46df9c-09b8-49d6-a21b-2ec2ac75ea45",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws error with Stored Procedure not found",
                  "fullTitle": "hdbext Example Stored Procedure with Callbacks throws error with Stored Procedure not found",
                  "timedOut": null,
                  "duration": 654,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "hdbextCallbacks.example2('SYS', 'IS_VALID_PASSWORD_NOT_A_PROC', {PASSWORD: \"TESTtest1234\"}, (err, result) => {\n    if (err) {\n        done()\n    } else {\n        done(new Error(`Expected Exception but Received None`))\n    }\n})",
                  "err": {},
                  "uuid": "b759dcaf-d25c-4904-8fe3-4bba4a5ed930",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7dfc0a55-f2d5-4045-a6b3-799818cae6e4",
                "ef46df9c-09b8-49d6-a21b-2ec2ac75ea45",
                "b759dcaf-d25c-4904-8fe3-4bba4a5ed930"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1913,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}